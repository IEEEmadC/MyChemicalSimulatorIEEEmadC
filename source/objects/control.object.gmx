<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>device_mouse_dbclick_enable(true);
startDB();
DerpXml_Init();
randomize();
ds_set_precision(0.001);

moleculas = ds_list_create();
sprites = ds_map_create();
global.newElements = ds_stack_create();
global.newMoleculas = ds_stack_create();



global.room_before = noone;
tabla_vuelta = false;
 

// mensajes iniciales
ini_open("texts.ini");
global.mensaje = ini_read_real("Last", "msg", 0);
global.tabla = ini_read_real("Last", "tabla", 0);
global.compuestos = ini_read_real("Last", "comps", 0); 
global.lista_react = ini_read_real("Last", "lista_react", 0); ;

if global.mensaje &lt; 2 {
    with (instance_create(x, y, dialogo)) {
        mensaje = ini_read_string(global.lang, "msg0", "");
        global.mensaje++;
    }
    with (instance_create(x, y, dialogo)) {
        mensaje = ini_read_string(global.lang, "msg1", "");
        global.mensaje++;
    }
    ini_write_real("Last", "msg", global.mensaje);
}
ini_close();

audio_stop_all();
alarm_set(0, 3);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var cant = runQuery("SELECT COUNT(*) FROM molecula WHERE b_conocida=1 AND id_categoria&gt;1;", true);
if int64(cant[|0])&lt;20 {
    audio_play_sound(gameParte1, 1, true);
} else {
    audio_play_sound(gameParte2, 1, true);
}
ds_list_destroy(cant);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fabrica de elementos 
while not ds_stack_empty(global.newElements) {
    var sprites = variable_instance_get(id, "sprites");
    var xx = random(room_width);
    var yy = random(room_height);
    var newMol = instance_create(xx, yy, Molecula);
   
    /* Creacion del elemento solicitado con toda su informacion */    
    var elm = ds_stack_pop(global.newElements);
    var newElm = create_elm(xx, yy, elm);
    with newElm { 
        if  !ds_map_exists(other.sprites, elm) {
            other.sprites[? elm] = getSprite(elm); 
        }
        sprite_index = other.sprites[? elm]; 
        molecula_padre = newMol.id;
    }

    with newMol {
        ds_list_add(elementos, newElm);
        formula = newElm.simbolo
    }  
    
}

// Fabrica de moleculas
while not ds_stack_empty(global.newMoleculas) {
    var mol = ds_stack_pop(global.newMoleculas);
    var xx = random(room_width);
    var yy = random(room_height);
    var newElm;
    var newMol = instance_create(xx, yy, Molecula);
    var elms = runQuery("SELECT me.cant_elm, me.s_simbolo FROM molecula_elemento me, 
                        molecula m WHERE m.id_molecula=me.id_molecula 
                        AND m.s_formula='" + mol + "';", true);
    for (var i=0; i&lt;ds_list_size(elms)/2; i++) {
        repeat (int64(elms[| 2*i])) {
            var elm = elms[| 2*i+1];
            newElm = create_elm(random(room_width), random(room_height), elm);
            with newElm {
                if  !ds_map_exists(other.sprites, elm) {
                    other.sprites[? elm] = getSprite(elm); 
                }                
                sprite_index = other.sprites[? elm];
                molecula_padre = newMol.id;
            }
            ds_list_add(newMol.elementos, newElm);
        }
    }
    newMol.formula = mol;
    ds_list_destroy(elms);
}

if not tabla_vuelta &amp;&amp; global.room_before == table {
    tabla_vuelta = true;
    if global.mensaje &lt; 3 {
        ini_open("texts.ini");
        with (instance_create(x, y, dialogo)) {
            mensaje = ini_read_string(global.lang, "msg2", "");
            global.mensaje++;
        }
        ini_write_real("Last", "msg", global.mensaje);
        ini_close();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>control</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reacciones
var colision = ds_map_create();
var cuales = ds_list_create();
var todos = ds_list_create();
var res = 0;
var total = 0;
with (Element) {
    if place_meeting(x, y, Element) {
        if ds_list_find_index(todos, molecula_padre)==-1 {
            ds_list_add(todos, molecula_padre);
            total += ds_list_size(molecula_padre.elementos);
            if not ds_map_exists(colision, molecula_padre.formula) {
                if ds_list_find_index(cuales, molecula_padre)==-1 {
                    ds_list_add(cuales, molecula_padre);
                    colision[? molecula_padre.formula] = 1;
                } else {
                    colision[? molecula_padre.formula] += 1;
                }  
            } else {
                colision[? molecula_padre.formula] += 1;
            }
        }
    }
}
res = react(cuales, colision, total); 
switch (ds_list_size(res)) {
    case 4:
    switch (res[| 0]) {
        case SINTESIS:
            switch (res[| 1]) {
                case "1": {// ej: ["SINTESIS", 1, "O2"]
                    var newMol = instance_create(x, y, Molecula);           
                    sintesis(newMol, todos);
                    newMol.formula = res[| 2];
                    ds_list_add(moleculas, res[| 2]);
                    for (var i=0; i&lt;ds_list_size(todos); i++) {
                        with (todos[| i]) {
                            instance_destroy();
                        }
                    }
                    break;
                }
                case "2": {// ej: ["SINTESIS", 2, "H2O"]
                    var newMol1 = instance_create(x, y, Molecula); 
                    var newMol2 = instance_create(x, y, Molecula);
                    sintesis2(newMol1, newMol2, todos);
                    newMol1.formula = res[| 2];
                    newMol2.formula = res[| 2];
                    ds_list_add(moleculas, res[| 2]);
                    for (var i=0; i&lt;ds_list_size(todos); i++) {
                        with (todos[| i]) {
                            instance_destroy();
                        }
                    }
                    break;
                }
            }
            conocida(res[| 3]);
            break;
            
                   
    }
    break;
    default:
        audio_play_sound(nothing, 0, false);
        break;  
}
if ds_list_size(moleculas)&gt;0 {
    event_user(0);
}

ds_list_destroy(cuales);
ds_map_destroy(colision);
ds_list_destroy(todos);
ds_list_destroy(res);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///verificar molecula no conocida
var _conocida;
var res = 0;
var mol = "";
for (var i=0; i&lt;ds_list_size(moleculas); i++) {
    mol = moleculas[| i];
    _conocida = runQuery("SELECT b_conocida FROM molecula 
                            WHERE s_formula='" + mol + "';" ,false);
    if _conocida[| 0]=="0" {
        descubierta(mol);
        audio_play_sound(new, 0, false);
        with (instance_create(x, y, dialogo)) {
            switch (global.lang){
                case ENG:
                    mensaje = "You have discovered " + mol;
                    break;
                case ESP:
                    mensaje = "Has descubierto " + mol;
                    break;
            }
        }
    }
}
ds_list_clear(moleculas);

// desbloquear nuevos elementos en la tabla periodica
var cant = runQuery("SELECT COUNT(*) FROM molecula WHERE b_conocida=1 AND id_categoria&gt;1;", true);
switch (int64(cant[| 0])) {
    case 1: desbloqueado(10);
        audio_play_sound(unlocked, 0, false);
        ini_open("texts.ini");
        with (instance_create(x, y, dialogo)) {
            mensaje = ini_read_string(global.lang, "msg3", "");
            global.mensaje++;
        }
        with (instance_create(x, y, dialogo)) {
            mensaje = ini_read_string(global.lang, "msg4", "");
            global.mensaje++;
        }
        ini_write_real("Last", "msg", global.mensaje);
        ini_close();
        break;
    case 2:
        ini_open("texts.ini");
        with (instance_create(x, y, dialogo)) {
            mensaje = ini_read_string(global.lang, "msg5", "");
            global.mensaje++;
        }
        ini_write_real("Last", "msg", global.mensaje);
        ini_close();
        break;
    case 3:
        ini_open("texts.ini");
        with (instance_create(x, y, dialogo)) {
            mensaje = ini_read_string(global.lang, "msg6", "");
            global.mensaje++;
        }
        ini_write_real("Last", "msg", global.mensaje);
        ini_close();
        break;
    case 5:
        ini_open("texts.ini");
        with (instance_create(x, y, dialogo)) {
            mensaje = ini_read_string(global.lang, "msg7", "");
            global.mensaje++;
        }
        ini_write_real("Last", "msg", global.mensaje);
        ini_close();
        break;
    case 20: desbloqueado(20);
        audio_stop_all();
        audio_play_sound(unlocked2, 0, false);
        audio_play_sound(gameParte2, 1, true);
        ini_open("texts.ini");
        with (instance_create(x, y, dialogo)) {
            mensaje = ini_read_string(global.lang, "msg8", "");
            global.mensaje++;
        }
        ini_write_real("Last", "msg", global.mensaje);
        ini_close();
        break;
    case 70:
        audio_play_sound(unlocked2, 0, false);
        ini_open("texts.ini");
        with (instance_create(x, y, dialogo)) {
            mensaje = ini_read_string(global.lang, "msg9", "");
            global.mensaje++;
        }
        ini_write_real("Last", "msg", global.mensaje);
        ini_close();
        break;   
    default:
        break;
}
ds_list_destroy(cant);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
