<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>elem1 = noone;
elem2 = noone;
pos = 0;
dir = 0;
alarm_set(0, 2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dist = 0;
var dist1 = 0;
var dist2 = 0;
var col = false;
var op = 1;
if (elem1!=noone and elem2!=noone) {
    dist2 = 20 + elem1.sprite_width/2 + elem2.sprite_width/2;
    
    with elem1 {
        if distance_to_object(other.elem2) &lt;&gt; dist2 {
            col = true;
        }
    }
    if col {
        dist1 = point_distance(elem1.x, elem1.y, elem2.x, elem2.y);     
        dir = point_direction(elem1.x, elem1.y, elem2.x, elem2.y);
        dist = abs(dist2 - dist1)/2;
        op = sign(dist2 - dist1);
        with elem1 {
            x -= lengthdir_x(dist, other.dir)*op;
            y -= lengthdir_y(dist, other.dir)*op;
        }
        with elem2 {
            x += lengthdir_x(dist, other.dir)*op;
            y += lengthdir_y(dist, other.dir)*op;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_black);
var dir2 = dir;
switch pos {
    case 1: dir2 += 90;
    break;
    case 2: dir2 -= 90;
    break;
    default:
    break;
}
if (elem1!=noone and elem2!=noone) {
    var xoff = lengthdir_x(5, dir2);
    var yoff = lengthdir_y(5, dir2);
    draw_line(elem1.x+xoff, elem1.y+yoff, elem2.x+xoff, elem2.y+yoff);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
